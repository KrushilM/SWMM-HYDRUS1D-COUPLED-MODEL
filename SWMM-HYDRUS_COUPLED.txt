import sys
import os
import numpy as np
import pandas as pd
import phydrus as ps
from pyswmm import Simulation,LidControls, LidGroups, LidUnit, Subcatchments, Nodes
from swmm_api import read_inp_file, SwmmInput
from swmm_api.input_file import read_inp_file, SwmmInput, section_labels as sections
filename = "F:\Krushil\Project\python\inp\BEGH_hydrus_no_routing_LID.inp"

from swmm_api import read_inp_file, SwmmInput
from swmm_api.input_file import read_inp_file, SwmmInput, section_labels as sections
inp = read_inp_file(filename)
from swmm_api.input_file.section_labels import INFILTRATION, SUBCATCHMENTS, CONDUITS, SUBAREAS
sub_properties = inp[INFILTRATION]


def getPervrunoff(subcatch):
    with Simulation(filename) as sim:
        sim.step_advance(600)
        subcatchments = Subcatchments(sim)
        sub = subcatchments[subcatch]
        lid_unit = LidGroups(sim)[subcatch]
        prec = []
        for step in sim:
            prec.append(sub.rainfall/60)
        tAtm = []
        tAtm = list(range(0,(len(prec)+2)*10,10))
        tAtm[0] = 1
        rsoil = [0]*(len(prec)+2)
        hCritA = [10000]*(len(prec)+2)
        Prec = []
        Prec.append(0)
        Prec[1:] = prec
        atmo_file = pd.DataFrame(list(zip(tAtm,Prec,rsoil,hCritA)))
        atmo_file.columns = ['tAtm','Prec','rsoil','hCritA']
        ws = "Trial1"
        exe =  'C:\Python37\Lib\site-packages\phydrus\source_code-main\hydrus.exe'
        desc = ""
        ml = ps.Model(exe_name=exe, ws_name=ws, name="model", description=desc,mass_units="-", time_unit="min", length_unit="mm")
        times = ml.add_time_info(tinit = 0,tmax=(len(prec)+1)*10, print_times=True, dt=0.0001,dtmin=0.0001,dtmax = 10,dtprint=10)
        ml.add_waterflow(model = 0,maxit=25, tolth=1e-5, tolh=0.0001,linitw=True, top_bc=2, bot_bc=4, ha=1e-6, hb=1e4)
        m = ml.get_empty_material_df(n=3)
        m.loc[1:3] = [[0.065, 0.41, 0.0075, 1.89, sub_properties[subcatch]['Ksat']/60, 0.5],
                 [0.065, 0.41, 0.0075, 1.89, sub_properties[subcatch]['Ksat']/60, 0.5],
                  [0.065, 0.41, 0.0075, 1.89, sub_properties[subcatch]['Ksat']/60, 0.5]]
        ml.add_material(m)
        profile = ps.create_profile(bot=[-60, -200, -500], dx=1,h=[0.2,0.15,0.15], mat=m.index)
        ml.add_profile(profile)
        atm = atmo_file
        ml.add_atmospheric_bc(atm,hcrits=0)
        ml.write_input()
        ml.simulate()
        path1 = "Trial1\T_LEVEL.OUT"
        f= open(path1, "r")
        raw = f.readlines()
        data = []
        import re
        for line in raw[5:]:
            data.append(re.split('\s+', line))
        df = pd.DataFrame(data[3:-1], columns=data[0])
        Perv_Runoff = []
        runoff = 0
        Perv_Infiltration = []
        infil = 0
        tAtm[0] = 0
        if len(lid_unit) > 0:
            for i in tAtm[:-3]:
                runoff = (float(df['sum(RunOff)'][i+10])-float(df['sum(RunOff)'][i]))*(sub.area*(1-sub.percent_impervious)*10**4/(10*60))*((sub.area*10**4-lid_unit[0].unit_area)/(sub.area*10**4))
                infil = float(df['sum(Infil)'][i])*(1-sub.percent_impervious)*((sub.area*10**4-lid_unit[0].unit_area)/(sub.area*10**4))
                Perv_Runoff.append(runoff)
                Perv_Infiltration.append(infil)
        else:
            for i in tAtm[:-3]:
                runoff = (float(df['sum(RunOff)'][i+10])-float(df['sum(RunOff)'][i]))*(sub.area*(1-sub.percent_impervious)*10**4/(10*60))
                infil = float(df['sum(Infil)'][i])*(1-sub.percent_impervious)
                Perv_Runoff.append(runoff)
                Perv_Infiltration.append(infil)
        stat_perv_runoff = float(df['sum(RunOff)'][len(df)-1])*(1-sub.percent_impervious)
        stat_perv_infil = float(df['sum(Infil)'][len(df)-1])*(1-sub.percent_impervious)
        Perv_Runoff.append(0)
         
    return Perv_Runoff, Perv_Infiltration ,stat_perv_runoff, stat_perv_infil


def getImpervrunoff(subcatch,lid_inflow,lid_area):
    with Simulation(filename) as sim:
        sim.step_advance(600)
        subcatchments = Subcatchments(sim)
        sub = subcatchments[subcatch]
        lid_unit = LidGroups(sim)[subcatch]
        prec = []
        imperv_runoff = []
        total_runoff_imperv = []

        if len(lid_unit) > 0:
            lid_unit[0].from_impervious = lid_inflow
            lid_unit[0].unit_area = sub.percent_impervious*sub.area*10**4*lid_area/100
            for step in sim:
                prec.append(sub.rainfall/60)
                imperv_runoff.append(sub.percent_impervious*(sub.area*10**4-lid_unit[0].unit_area)*sub.rainfall/3600)
                stat_imperv_runoff = (sub.statistics["precipitation"]*sub.percent_impervious)
            first_unit = lid_unit[0]
            runon =[]
            runon = (np.array(imperv_runoff)*first_unit.from_impervious*60)/(100*first_unit.unit_area)
            imperv_runoff = np.array(imperv_runoff)*(1-first_unit.from_impervious/100)
            inflow = runon + prec
            if lid_unit[0].lid_control == "PP1":
                tAtm = []
                tAtm = list(range(0,(len(inflow)+2)*10,10))
                tAtm[0] = 1
                rsoil = [0]*(len(inflow)+2)
                hCritA = [10000]*(len(inflow)+2)
                Prec = []
                Prec.append(0)
                Prec[1:] = list(inflow)
                atmo_file = pd.DataFrame(list(zip(tAtm,Prec,rsoil,hCritA)))
                atmo_file.columns = ['tAtm','Prec','rsoil','hCritA']
                ws = "Trial1"
                exe =  'C:\Python37\Lib\site-packages\phydrus\source_code-main\hydrus.exe'
                desc = ""
                ml = ps.Model(exe_name=exe, ws_name=ws, name="model", description=desc,mass_units="-", time_unit="min", length_unit="mm")
                times = ml.add_time_info(tinit = 0,tmax=(len(inflow)+1)*10, print_times=True, dt=0.0001,dtmin=0.0001,dtmax = 10,dtprint=10)
                ml.add_waterflow(model = 0,maxit=50, tolth=1e-5, tolh=0.0001,linitw=True, top_bc=2, bot_bc=4, ha=1e-6, hb=1e4)
                m = ml.get_empty_material_df(n=4)
                m.loc[1:4] = [[0.045, 0.15, 0.337, 1.47, 10 , 0.5],
                 [0.057, 0.41, 0.0124, 2.28, 3.5, 0.5],
                  [0.057, 0.41, 0.0124, 2.28, 2, 0.5],
                   [0.078, 0.43, 0.036, 1.56, sub_properties[subcatch]['Ksat']/60,0.5]]
                ml.add_material(m)
                profile = ps.create_profile(bot=[-100, -250, -650,-1000], dx=1,h=[0.1,0.1,0.1,0.15], mat=m.index)
                ml.add_profile(profile)
                atm = atmo_file
                ml.add_atmospheric_bc(atm,hcrits=0)
                ml.write_input()
                ml.simulate()
                path1 = "Trial1\T_LEVEL.OUT"
                f= open(path1, "r")
                raw = f.readlines()
                data = []
                import re
                for line in raw[5:]:
                    data.append(re.split('\s+', line))
                df = pd.DataFrame(data[3:-1], columns=data[0])
                LID_Runoff = []
                runoff = 0
                LID_Infiltration = []
                infil = 0
                tAtm[0] = 0
                for i in tAtm[:-3]:
                    runoff = (float(df['sum(RunOff)'][i+10])-float(df['sum(RunOff)'][i]))*(first_unit.unit_area/(10*60))
                    LID_Runoff.append(runoff)
                    infil = float(df['sum(Infil)'][i])*(first_unit.unit_area/(sub.area*10**4))
                    LID_Infiltration.append(infil)
                stat_LID_inflow = float(df['sum(rTop)'][len(df)-1])*-1
                stat_LID_runoff = float(df['sum(RunOff)'][len(df)-1])
                stat_LID_infil = float(df['sum(Infil)'][len(df)-1])
                LID_Runoff.append(0)
                for i in range(0,len(LID_Runoff),1):
                    total_runoff_imperv.append(LID_Runoff[i]+imperv_runoff[i])
        else:
            for step in sim:
                
                imperv_runoff.append(sub.percent_impervious*(sub.area*10**4)*sub.rainfall/3600)
            total_runoff_imperv = imperv_runoff
            LID_Infiltration = []
            stat_LID_inflow = 0
            stat_LID_runoff = 0
            stat_LID_infil = 0
            stat_imperv_runoff = (sub.statistics["precipitation"]*sub.percent_impervious)
    return total_runoff_imperv, LID_Infiltration, stat_imperv_runoff, stat_LID_inflow,stat_LID_runoff, stat_LID_infil

def getHydrusSubRunoff(subcatch,lid_inflow,lid_area):
    perv_runoff,perv_Infiltration, stat_perv_runoff, stat_perv_infil = getPervrunoff(subcatch)
    imperv_runoff, LID_Infiltration, stat_imperv_runoff, stat_LID_inflow,stat_LID_runoff, stat_LID_infil = getImpervrunoff(subcatch,lid_inflow,lid_area)
    subcatch_runoff = 0
    Subcatch_Runoff = []
    for i in range(0,len(perv_runoff),1):
        subcatch_runoff = perv_runoff[i] + imperv_runoff[i]
        Subcatch_Runoff.append(subcatch_runoff)
    return Subcatch_Runoff, perv_Infiltration, stat_perv_runoff, stat_perv_infil, LID_Infiltration, stat_imperv_runoff, stat_LID_inflow,stat_LID_runoff, stat_LID_infil


with Simulation(filename) as sim:
    sim.step_advance(600)
    subcatchments = Subcatchments(sim)
    subcatch_id = []
    node_id = []
    subcatchment_node = {}
    
    nodes = Nodes(sim)
    for sub in Subcatchments(sim):
        subcatch_id.append(sub.subcatchmentid)
    for i in subcatch_id:
            subcatchment_node[i] = (subcatchments[i].connection[1])
        #subcatchment_node.append(subcatchments[i].connection)
    for node in Nodes(sim):
        node_id.append(node.nodeid)
    node_subcatch = {}
    
    for i in node_id:
        node_subcatch[i]=[]
        for j in subcatch_id:
            if subcatchment_node[j] == i :
                node_subcatch[i].append(j)


def getSWMMsubrunoff(subcatch,lid_inflow,lid_area):
    with Simulation(filename) as sim:
        sim.step_advance(600)
        subcatchments = Subcatchments(sim)
        sub = subcatchments[subcatch]
        subcatch_runoff = []
        for sub in subcatchments:
            lid_unit = LidGroups(sim)[sub.subcatchmentid]
            lid_unit[0].from_impervious = lid_inflow
            lid_unit[0].unit_area = sub.percent_impervious*sub.area*10**4*lid_area/100
        for step in sim:
            subcatch_runoff.append(sub.runoff)
    return subcatch_runoff

Hydrus_subcatch_runoff = pd.DataFrame()
SWMM_subcatch_runoff = pd.DataFrame()
Hydrus_subcatch_perv_infil = pd.DataFrame()
Hydrus_subcatch_LID_infil = pd.DataFrame()
Hydrus_subcatch_stat_perv_infil = pd.DataFrame()
Hydrus_subcatch_stat_perv_runoff = pd.DataFrame()
Hydrus_subcatch_stat_imperv_runoff = pd.DataFrame()
Hydrus_subcatch_stat_LID_inflow = pd.DataFrame()
Hydrus_subcatch_stat_LID_runoff = pd.DataFrame()
Hydrus_subcatch_stat_LID_infil = pd.DataFrame()
for i in subcatch_id:
    print(i)
    hydrus_sc = getHydrusSubRunoff(i,lid_inflow,lid_area)
    
    hydrus_sc_runoff = hydrus_sc[0]
    Hydrus_subcatch_runoff[i] = hydrus_sc_runoff
    
    hydrus_sc_perv_infil = hydrus_sc[1]
    Hydrus_subcatch_perv_infil[i] = hydrus_sc_perv_infil
    
    hydrus_sc_LID_infil = hydrus_sc[4]
    Hydrus_subcatch_LID_infil[i] = hydrus_sc_LID_infil
    
    hydrus_sc_stat_perv_infil = hydrus_sc[3]
    Hydrus_subcatch_stat_perv_infil[i] = [hydrus_sc_stat_perv_infil]
    
    hydrus_sc_stat_perv_runoff = hydrus_sc[2]
    Hydrus_subcatch_stat_perv_runoff[i] = [hydrus_sc_stat_perv_runoff]
    
    hydrus_sc_stat_imperv_runoff = hydrus_sc[5]
    Hydrus_subcatch_stat_imperv_runoff[i] = [hydrus_sc_stat_imperv_runoff] 
    
    hydrus_sc_stat_LID_inflow = hydrus_sc[6]
    Hydrus_subcatch_stat_LID_inflow[i] = [hydrus_sc_stat_LID_inflow] 
    
    hydrus_sc_stat_LID_runoff = hydrus_sc[7]
    Hydrus_subcatch_stat_LID_runoff[i] = [hydrus_sc_stat_LID_runoff]
    
    hydrus_sc_stat_LID_infil = hydrus_sc[8]
    Hydrus_subcatch_stat_LID_infil[i] = [hydrus_sc_stat_LID_infil]
    
    swmm_sc_runoff = getSWMMsubrunoff(i,lid_inflow,lid_area)
    SWMM_subcatch_runoff[i] = swmm_sc_runoff


with Simulation(filename) as sim:
    sim.step_advance(600)
    subcatchments = Subcatchments(sim)
    #for sub in subcatchments:
        #lid_unit = LidGroups(sim)[sub.subcatchmentid]
        #lid_unit[0].from_impervious = lid_inflow
        #lid_unit[0].unit_area = sub.percent_impervious*sub.area*10**4*lid_area/100
    nodes = Nodes(sim)
    k = 0
    for step in sim:
        for i in node_id:
            correction_hydrus = 0
            correction_SWMM = 0
            correction = 0
            for j in node_subcatch[i]:
                correction_hydrus += Hydrus_subcatch_runoff[j][k]
                correction_SWMM += SWMM_subcatch_runoff[j][k]
            correction = correction_hydrus-correction_SWMM
            nodes[i].generated_inflow(correction)
        print(nodes["395"].total_inflow)
        k += 1